# DATAFILE
shell mkdir logs
shell mkdir movs
log        logs/log.main
units      metal
boundary   p p p
atom_style full
box tilt large
bond_style     harmonic
angle_style    harmonic
dihedral_style fourier
improper_style none
pair_style     lj/cut/coul/long 14.0
kspace_style   ewald 1e-8
read_data      DATAFILE
pair_modify    mix arithmetic shift yes tail no table 0
special_bonds  lj 0.0 0.0  0.00000 coul 0.0 0.0  0.00000

variable TK          equal   300.0
variable Pbar        equal   0.0
variable dt          equal   0.0005
variable tdamp       equal   100*${dt}
variable NumberOfNVEMDCycles equal 100
variable NumberOfNPTMDCycles equal 1000
variable ndump               equal 100
variable RandomSeed          equal RANDOMSEED
variable Gnorm               equal 1.0e-6
# ------------------------ Optimisation Run -------------------------------
dump        traj_opti all custom ${ndump} movs/opti.lammpstrj element xs ys zs
dump_modify traj_opti element ELEMENTS  first yes sort id
print "MinStep CellMinStep AtomMinStep FinalStep Energy EDiff" file logs/minimization.txt screen no
variable min_eval equal ${Gnorm}
variable           prev_E     equal 50000.00
variable           iter       loop 100000
thermo             100
thermo_style       one
label              loop_min
min_style          cg
log logs/log.opt append
fix   opt_conp all box/relax tri 0.0 vmax 0.001
#minimize           1.0e-8 1.0e-8 1000 10000
minimize        1.0e-15 1.0e-15 10000 100000
unfix opt_conp
log logs/log.main append
min_style          fire
timestep           0.0005
variable           tempstp     equal $(step)
variable           CellMinStep equal ${tempstp}
log logs/log.opt  append
minimize        1.0e-15 1.0e-15 10000 100000
#minimize 1.0e-8 1.0e-8 1000 10000
log logs/log.main append
variable           AtomMinStep equal ${tempstp}
variable           temppe      equal $(pe)
variable           min_E       equal abs(${prev_E}-${temppe})
print "${iter} ${CellMinStep} ${AtomMinStep} ${AtomMinStep} $(pe) ${min_E}" append logs/minimization.txt screen no
if "${min_E} < ${min_eval}" then "jump SELF break_min"
variable    prev_E     equal ${temppe}
next        iter
jump        SELF loop_min
label       break_min
undump      traj_opti
print "Simulation finished"
